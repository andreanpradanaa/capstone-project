<?php

namespace Tests\Unit;

use App\Models\Booking;
use App\Models\FoodDiary;
use App\Models\Goal;
use App\Models\GoalHistory;
use App\Models\Review;
use App\Models\Role;
use App\Models\User;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class UserTest extends TestCase
{
    /**
     * A basic unit test example.
     *
     * @return void
     */
    use RefreshDatabase;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $roleUser = Role::factory()->create(['name' => 'user', 'display_name' => 'User', 'description' => 'User']);
        $roleDokter = Role::factory()->create(['name' => 'doctor', 'display_name' => 'Doctor', 'description' => 'Doctor']);

        $this->userUser = User::factory()->create();
        $this->userUser->roles()->attach($roleUser);

        $this->userDokter = User::factory()->create();
        $this->userDokter->roles()->attach($roleDokter);
    }

    public function test_user_can_has_many_food_diary()
    {
        $foodDiary = FoodDiary::factory()->create(['user_id' =>  $this->userUser->id]);

        $this->assertInstanceOf(Collection::class,  $this->userUser->foodDiaries);
        $this->assertInstanceOf(FoodDiary::class,  $this->userUser->foodDiaries->first());
    }

    public function test_user_belongs_to_many_role()
    {
        $this->assertInstanceOf(Collection::class,  $this->userUser->roles);
        $this->assertInstanceOf(Role::class,  $this->userUser->roles->first());
    }

    public function test_user_has_many_bookings()
    {
        $booking = Booking::factory()->create([
            'nama_user' =>  $this->userUser->name,
            'user_id' =>  $this->userUser->id,
            'status' => 'Waiting',
            'user_dokter_id' => $this->userDokter->id,
            'nama_dokter' => $this->userDokter->name]);

        $this->assertInstanceOf(Collection::class, $this->userUser->bookings);
        $this->assertInstanceOf(Booking::class, $this->userUser->bookings->first());
    }

    public function test_if_user_deleted_then_all_food_diary_will_be_deleted()
    {
        $foodDiary1 = FoodDiary::factory()->create(['user_id' =>  $this->userUser->id]);
        $foodDiary2 = FoodDiary::factory()->create(['user_id' =>  $this->userUser->id]);


        $this->userUser->delete();

        $this->assertDatabaseMissing('users', ['id' => $this->userUser->id]);
        $this->assertDatabaseMissing('food_diaries', ['id' => $foodDiary1->id]);
        $this->assertDatabaseMissing('food_diaries', ['id' => $foodDiary2->id]);
    }

    public function test_if_user_deleted_then_all_bookings_will_be_deleted()
    {
        $booking1 = Booking::factory()->create([
            'nama_user' =>  $this->userUser->name,
            'user_id' =>  $this->userUser->id,
            'status' => 'Waiting',
            'user_dokter_id' => $this->userDokter->id,
            'nama_dokter' => $this->userDokter->name]);
        $booking2 = Booking::factory()->create([
            'nama_user' =>  $this->userUser->name,
            'user_id' =>  $this->userUser->id,
            'status' => 'Waiting',
            'user_dokter_id' => $this->userDokter->id,
            'nama_dokter' => $this->userDokter->name]);

        $this->userUser->delete();

        $this->assertDatabaseMissing('users', ['id' => $this->userUser->id]);
        $this->assertDatabaseMissing('bookings', ['id' => $booking1->id]);
        $this->assertDatabaseMissing('bookings', ['id' => $booking2->id]);
    }

    public function test_user_can_has_one_goal()
    {
        Goal::factory()->create(['user_id' => $this->userUser->id]);

        $this->assertInstanceOf(Goal::class,  $this->userUser->goals->first());
    }

    public function test_user_can_has_many_goal_history()
    {
        GoalHistory::factory()->create(['user_id' => $this->userUser->id]);

        $this->assertInstanceOf(Collection::class, $this->userUser->goalHistories);
        $this->assertInstanceOf(GoalHistory::class,  $this->userUser->goalHistories->first());
    }

    public function test_if_user_deleted_then_goal_will_be_deleted()
    {
        $goal1 = Goal::factory()->create(['user_id' => $this->userUser->id]);

        $this->userUser->delete();

        $this->assertDatabaseMissing('users', ['id' => $this->userUser->id]);
        $this->assertDatabaseMissing('goals', ['id' => $goal1->id]);
    }

    public function test_if_user_deleted_then_all_goal_history_will_be_deleted()
    {
        $goalHistory1 = GoalHistory::factory()->create(['user_id' => $this->userUser->id]);
        $goalHistory2 = GoalHistory::factory()->create(['user_id' => $this->userUser->id]);

        $this->userUser->delete();

        $this->assertDatabaseMissing('users', ['id' => $this->userUser->id]);
        $this->assertDatabaseMissing('goal_histories', ['id' => $goalHistory1->id]);
        $this->assertDatabaseMissing('goal_histories', ['id' => $goalHistory2->id]);
    }

    public function test_user_can_has_many_reviews()
    {
        Review::factory()->create(['user_id' => $this->userUser->id, 'doctor_id' => $this->userDokter->id]);

        $this->assertInstanceOf(Collection::class, $this->userUser->reviews);
        $this->assertInstanceOf(Review::class,  $this->userUser->reviews->first());
    }
}
